---
title: "Estrarre le informazioni sul PNRR"
subtitle: "Un esempio a partire dai dati del Comune di Messina"
description-meta: "Una guida su come estrarre i dati relativi al PNRR relativi a un comune, dalle banche dati di OpenCUP, ANAC, Servizio Contratti Pubblici e OpenBDAP"
website:
  twitter-card:
    description: "Una guida su come estrarre i dati relativi al PNRR relativi a un comune, dalle banche dati di OpenCUP, ANAC, Servizio Contratti Pubblici e OpenBDAP"
  open-graph:
    description: "Una guida su come estrarre i dati relativi al PNRR relativi a un comune, dalle banche dati di OpenCUP, ANAC, Servizio Contratti Pubblici e OpenBDAP"
---


## Introduzione

In questa pagina verrà sviluppato un esempio completo, per estrarre le informazioni sul PNRR legate al Comune di Messina, a partire dalle fonti dati descritte in questa guida: [OpenCUP](../fonti/opencup/index.qmd), [ANAC](../fonti/anac/index.qmd), [SCP](../fonti/scp/index.qmd) e [OpenBDAP](../fonti/openbdap/index.qmd).

## Estrazione dei codici CUP da OpenCUP

```{python}
#| echo: false
#| warning: false

!if [ ! -f ../data/messina/opencup-focus-083048-cup.csv ]; then\
  mlr --csv filter -S '$CODI_CODICE_COMUNE=="083048"' ../data/opencup/opencup-focus-pnrr.csv >../data/messina/opencup-focus-083048.csv;\
fi

!if [ ! -f ../data/messina/opencup-focus-083048-cup.csv ]; then\
  mlr --c2n filter -S '$CODI_CODICE_COMUNE=="083048"' then cut -f CODICE_CUP then uniq -a then sort -f CODICE_CUP ../data/opencup/opencup-focus-pnrr.csv >../data/messina/opencup-focus-083048-cup.csv;\
fi

contaCup=!<../data/messina/opencup-focus-083048-cup.csv | wc -l
```

I dati "[focus PNRR](../fonti/opencup/focus-pnrr.qmd)", hanno una colonna che contiene il codice Istat dei Comuni italiani associati ai vari progetti. Quello del Comune di Messina è `083048`.

Il file di partenza è in formato Excel: per **estrarre** soltanto i dati di Messina, si cerca la colonna `CODI_CODICE_COMUNE`, si applica il filtro per il **valore `083048`** (vedi @fig-filtro-excel), si copiano e incollano i risultati in un nuovo foglio elettronico e si salva il file.

Come formato di _output_, si sceglie `CSV (delimitato da virgola) (*.csv)`. È il file [`opencup-focus-083048.csv`](../data/messina/opencup-focus-083048.csv).<br>
Sono **circa 360 progetti**.

![Applicare un filtro in un foglio elettronico](images/excel-filter.png){fig-alt="Applicare un filtro in un foglio elettronico" #fig-filtro-excel}

E a partire da questo file estratto, è utile per i prossimi step, **salvare** in CSV anche **un file contenente la sola colonna con i valori univoci di codici CUP**.<br>
Con un foglio elettronico si può fare un semplice copia e incolla in un nuovo foglio della sola prima colonna e salvare il tutto in CSV.<br>
In output il file [`opencup-focus-083048-cup.csv`](../data/messina/opencup-focus-083048-cup.csv).

::: {.callout-tip collapse="true"}
## Estrarre la sola colonna con i codici CUP, da riga di comando
È comodo farlo con [**Miller**](https://miller.readthedocs.io/en/latest/):

```{.bash}
mlr --csv cut -f CODICE_CUP then uniq -a opencup-focus-083048.csv >opencup-focus-083048-cup.csv
```

Con `cut -f CODICE_CUP` si taglia la sola colonna `CODICE_CUP` e con `uniq -a` si estraggono i soli valori univoci.

:::

## Estrarre i dati da ANAC, a partire dai codici CUP estratti

```{python}
#| echo: false
#| warning: false

!if [ ! -f ../data/messina/anac-cup-cig-083048.csv ]; then\
  qsv searchset -d ";" -i -s CUP ../data/messina/opencup-focus-083048-cup.csv ../data/anac/cup_csv.csv >../data/messina/anac-cup-cig-083048.csv;\
fi
```

Il [dataset CUP](../fonti/anac/index.qmd#il-dataset-cup) pubblicato dall'Autorità Nazionale Anticorruzione è composto da **più di 3 milioni di record**, quindi con è "lavorabile" con un foglio elettronico (troppe righe).<br>
È necessario utilizzare un linguaggio di programmazione o delle _utility_ dedicate alla elaborazione di file di testo strutturato (`CSV`, `TSV`, `JSON`, ecc.).

Il file di riferimento ha soltanto le colonne `CIG` e `CUP`.

| CIG | CUP |
| --- | --- |
| 5462644C6C | I81C11000040006 |
| 009893079C | 000000000000000 |
| ZBB02E5426 | H81J09002660007 |

Quindi, a partire dai CUP associati al Comune di Messina [estratti sopra](#estrazione-dei-codici-cup-da-opencup), bisogna estrarre dai dati ANAC soltanto le righe con i codici CUP corrispondenti. I due dataset si devono incrociare tra loro (si definisce `JOIN`[^join]), usando al la coincidenza tra i `CUP` come filtro.

[^join]: vedi [Wikipedia](https://www.wikiwand.com/it/Join%20(SQL)).

![I dati verranno incrociati (un `JOIN`), sfruttando la coincidenza dei `CUP`](images/opencup-focus-join-anac-083048.png){fig-alt="Join tra dati OpenCUP e ANAC" #fig-join-opencup-anac}

Per farlo si può usare il comodo ed efficiente [`qsv`](https://github.com/jqnatividad/qsv), a partire dai  file [`opencup-focus-083048-cup.csv`](../data/messina/opencup-focus-083048-cup.csv) (che contiene i soli codici CUP del Comune di Messina) e [`cup_csv.csv`](https://dati.anticorruzione.it/opendata/download/dataset/cup/filesystem/cup_csv.zip) (che è il file di ANAC):

```{.bash}
qsv searchset -d ";" -i -s CUP opencup-focus-083048-cup.csv cup_csv.csv >anac-cup-cig-083048.csv
```

Alcune note sul comando:

- `-d ";"` per impostare il separatore di campo che nel `cup_csv.csv` di ANAC è `;`
- `-i`, per fare una ricerca che non tenga conto di "maiuscole" e "miniscole";
- `-s CUP`, per definire la colonna su cui eseguire la ricerca dei `CUP`;
- e infine il file che verrà usato come filtro `opencup-focus-083048-cup.csv` e quello da cui verranno estratti i file.

```{python}
#| echo: false
#| warning: false

from IPython.display import display, Markdown
import humanize
import locale
locale.setlocale(locale.LC_ALL,"it_IT.UTF-8")

humanize.i18n.activate("it_IT")

numeroRecordAnacMessina=!echo "$(<../data/messina/anac-cup-cig-083048.csv | wc -l) - 1" | bc
numeroCupAnacMessina=!mlr --c2n count-distinct -f CUP -n  ../data/messina/anac-cup-cig-083048.csv
numeroCigAnacMessina=!mlr --c2n count-distinct -f CIG -n  ../data/messina/anac-cup-cig-083048.csv

text=f"""

In output il file [`anac-cup-cig-083048.csv`](../data/messina/anac-cup-cig-083048.csv) (separatore di campo la `,`):

- numero di **record** pari **{numeroRecordAnacMessina[0]}** (esclusa la riga di intestazione);
- numero di **codici CUP** univoci **{numeroCupAnacMessina[0]}**;
- numero di **codici CIG** univoci **{numeroCigAnacMessina[0]}**.

"""

!mlr --c2n cut -f CIG then uniq -a then sort -f CIG  ../data/messina/anac-cup-cig-083048.csv >../data/messina/anac-cup-cig-083048-cig.csv

display(Markdown(text))
```

A partire dal file estratto è utile **estrarre** anche un **file `CSV`** con i **soli codici CIG univoci**.<br>
Per questo esempio è stato creato il file [anac-cup-cig-083048-cig.csv](../data/messina/anac-cup-cig-083048-cig.csv).

::: {.callout-tip collapse="true"}
## Estrarre la lista dei valori univoci dei CIG

Si può usare [Miller](https://miller.readthedocs.io/en/6.7.0/).

```{bash}
mlr --c2n cut -f CIG then uniq -a anac-cup-cig-083048.csv >anac-cup-cig-083048-cig.csv
```

- `cut -f CIG`, per estrarre soltanto la colonna `CIG`;
- `then uniq -a`, per rimuovere eventuali doppioni.

:::

Questo file è comodo per [**interrogare le API di ANAC**](../fonti/anac/informazioni-cig.qmd#tramite-api), ed **estrarre** le **informazioni relative** a questi codici CIG estratti per Messina.<br>
Questa è un'operazione semplice, ma richiede alcune conoscenze di programmazione. Qui sotto, al click, un esempio di codice.

::: {.callout-note collapse="true"}
## Interrogare le API di ANAC ed estrarre i dati di insieme

È uno script `bash` basato su [Miller](https://miller.readthedocs.io/en/latest/) e su [flatterer](https://flatterer.opendata.coop/).

```{.bash}
# variabile con il percorso assoluto della cartella dello script
folder="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# crea le cartelle di output
mkdir -p "$folder"/rawdata/cig
mkdir -p "$folder"/cig

# per ogni CIG estratto, interroga l'API di ANAC e salva il file jsonl
while IFS="" read -r line; do
  if [ ! -f "$folder"/rawdata/cig/"$line".jsonl ]; then
    curl -kL "https://api.anticorruzione.it/apicig/1.0.0/getSmartCig/$line" >"$folder"/rawdata/cig/"$line".jsonl
  fi
done <"$folder"/anac-cup-cig-083048-cig.csv

# unisci tutti i file jsonl in un unico file json
if [ ! -f "$folder"/anac-cig.json ]; then
  mlr --ijsonl --ojson --no-jvstack  cat "$folder"/rawdata/cig/*.jsonl >"$folder"/anac-cig.json
fi

# estrai dal file JSON, le tabelle in esseo contenute in formato CSV
flatterer --force "$folder"/anac-cig.json "$folder"/cig
```
:::

In output diversi file `CSV` con le informazioni relative ai codici CIG estratti per Messina:

- [`anac-cig.csv`](../data/messina/cig/csv/anac-cig.csv), è il file principale più ricco, con le informazioni principali;
- [`bando_CUP.csv`](../data/messina/cig/csv/bando_CUP.csv), contiene i `CUP` correlati ai vari `CIG`;
- [`incaricati.csv`](../data/messina/cig/csv/incaricati.csv), contiene i nomi delle persone incaricate;
- [`bando_CPV.csv`](../data/messina/cig/csv/bando_CPV.csv), contiene i codici CPV - ovvero la categorizzazione del tipo di "oggetto" in gara - correlati ai vari `CIG`.

## Estrarre i dati della Banca dati Servizio Contratti Pubblici

Per estrarre i dati relativi a Messina e al PNRR dalla [Banca Dati SCP](../fonti/scp/index.qmd), si possono usare i **codici `CIG`** presenti nel file [anac-cup-cig-083048-cig.csv](../data/messina/anac-cup-cig-083048-cig.csv) estratto [sopra](#estrarre-i-dati-da-anac-a-partire-dai-codici-cup-estratti).

![I dati verranno incrociati (un `JOIN`), sfruttando la coincidenza dei `CIG`](images/scp-join-anac-083048.png){fig-alt="Join tra dati SCP e ANAC" #fig-join-scp-anac}


Qui sotto ad esempio i comandi necessari per estrarre i dati dai file **atti**, **esiti** e **bandi**, contenuti nella Banca Dati SCP.


```{python}
#| echo: false
#| warning: false

!if [ ! -f ../data/messina/scp-atti.csv ]; then\
  qsv searchset -i -s cig ../data/messina/anac-cup-cig-083048-cig.csv ../data/scp/v_od_atti.csv | mlr --csv clean-whitespace then put -S 'for (k in $*) {$[k] = gsub($[k], "\"", "")}' >../data/messina/scp-atti-083048.csv;\
fi

!if [ ! -f ../data/messina/scp-esiti.csv ]; then\
  qsv searchset -i -s cig ../data/messina/anac-cup-cig-083048-cig.csv ../data/scp/v_od_esiti.csv | mlr --csv clean-whitespace then put -S 'for (k in $*) {$[k] = gsub($[k], "\"", "")}' >../data/messina/scp-esiti-083048.csv;\
fi

!if [ ! -f ../data/messina/scp-bandi.csv ]; then\
  qsv searchset -i -s cig ../data/messina/anac-cup-cig-083048-cig.csv ../data/scp/v_od_bandi.csv | mlr --csv clean-whitespace then put -S 'for (k in $*) {$[k] = gsub($[k], "\"", "")}' >../data/messina/scp-bandi-083048.csv;\
fi
```

::: {.callout}
## Estrarre dai dati SCP, i dati a partire dai CIG di Messina

Si può usare ancora una volta il comodo ed efficiente [`qsv`](https://github.com/jqnatividad/qsv), a partire dal file [`anac-cup-cig-083048-cig.csv`](../data/messina/anac-cup-cig-083048-cig.csv) con i soli codici CIG legati al PNRR e relativi al Comune di Messina:

```{.bash}
# atti
qsv searchset -i -s cig anac-cup-cig-083048-cig.csv v_od_atti.csv >scp-atti-083048.csv
# esiti
qsv searchset -i -s cig anac-cup-cig-083048-cig.csv v_od_esiti.csv >scp-esiti-083048.csv
# bandi
qsv searchset -i -s cig anac-cup-cig-083048-cig.csv v_od_bandi.csv >scp-bandi-083048.csv
```

Con `-i -s cig anac-cup-cig-083048-cig.csv` si cercano nei file SCP nella colonna `cig` tutti i record contenenti i codici `CIG` estratti per Messina.
:::


In output:

- [`scp-atti-083048.csv`](../data/messina/scp-atti-083048.csv), contiene i dati relativi agli atti;
- [`scp-bandi-083048.csv`](../data/messina/scp-bandi-083048.csv), contiene i dati relativi ai bandi;
- [`scp-esiti-083048.csv`](../data/messina/scp-esiti-083048.csv), contiene i dati relativi agli esiti (ma, al 17 febbraio 2023, **non ci sono dati sugli esiti per Messina**).

## Estrarre i dati da OpenBDAP

OpenBDAP è un'altra fonte informativa nazionale sui contratti pubblici. Come indicato nella [sezione dedicata](../fonti/openbdap/index.qmd#i-dati-correlati-al-pnrr), è possibile fare delle ricerche per codice `CUP`, inserendo un elenco di CUP (**non più di 300 per volta**).

Quindi ancora una volta si possono usare i [codici CUP estratti per il Comune di Messina](#estrazione-dei-codici-cup-da-opencup), ovvero quelli del file  [`opencup-focus-083048-cup.csv`](../data/messina/opencup-focus-083048-cup.csv) e usarli come filtro per la ricerca su OpenBDAP. Sono circa 360, quindi si dovranno eseguire 2 ricerche.

In _output_ questo file `XLSX`, suddiviso in 3 fogli: `Dettaglio CUP`, `Dettaglio CIG` e `Dettaglio Indicatori`. Qui i dati estratti al 5 febbraio 2023: [`openbdap-083048.xlsx`](../data/messina/openbdap-083048.xlsx).

## Insieme dei dati raccolti

In **questo [foglio elettronico](https://docs.google.com/spreadsheets/d/1qD4AwS_DLoEckTvir0ndK14BXCtfDyC_dZkAi6cNjlA/edit?usp=sharing)** tutti gli _output_ estratti (fanno riferimento a quanto disponibile a inizio febbraio del 2023).<br>
Aprendolo si può avere un'idea di quali tipi di informazioni è possibile estrarre da queste fonti.

[![Foglio elettronico con i dati raccolti per Messina](images/dati-raccolti.png){fig-alt="Foglio elettronico con i dati raccolti relativi al Comune di Messina" #fig-foglio-dati-messina}](https://docs.google.com/spreadsheets/d/1qD4AwS_DLoEckTvir0ndK14BXCtfDyC_dZkAi6cNjlA/edit?usp=sharing)

{{< include ../include/_partecipa.md >}}
