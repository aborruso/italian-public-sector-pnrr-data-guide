{
  "hash": "491eafcfe23933157b171d58317cc13b",
  "result": {
    "markdown": "---\ntitle: \"Estrarre le informazioni sul PNRR\"\nsubtitle: \"Un esempio a partire dai dati del Comune di Messina\"\ndescription-meta: \"Una guida su come estrarre i dati relativi al PNRR relativi a un comune, dalle banche dati di OpenCUP, ANAC, Servizio Contratti Pubblici e OpenBDAP\"\nwebsite:\n  twitter-card:\n    description: \"Una guida su come estrarre i dati relativi al PNRR relativi a un comune, dalle banche dati di OpenCUP, ANAC, Servizio Contratti Pubblici e OpenBDAP\"\n  open-graph:\n    description: \"Una guida su come estrarre i dati relativi al PNRR relativi a un comune, dalle banche dati di OpenCUP, ANAC, Servizio Contratti Pubblici e OpenBDAP\"\n---\n\n::: {.callout-note}\n\n## Perché abbiamo scelto Messina per questo esempio\n\nL'associazione onData è stata coinvolta nella [**Scuola di Monitoraggio Civico del PNRR** di **Messina**](http://parliamentwatch.it/2023/03/07/monitorare-il-pnrr-3/), organizzata dall'**Osservatorio Civico PNRR** in collaborazione con **Parliament Watch Italia**. Per quell'occasione è stata raccontato il flusso di lavoro e sono stati resi disponibili i dati di esempio.\n\n**Nota bene**: in questo esempio non si fa riferimento ai [dati ReGiS](../fonti/regis/index.qmd), perché al momento della sua stesura questa fonte era inesistente.\n\n:::\n\n## Introduzione\n\nIn questa pagina verrà sviluppato un esempio completo, per estrarre le informazioni sul PNRR legate al Comune di Messina, a partire dalle fonti dati descritte in questa guida: [OpenCUP](../fonti/opencup/index.qmd), [ANAC](../fonti/anac/index.qmd), [SCP](../fonti/scp/index.qmd) e [OpenBDAP](../fonti/openbdap/index.qmd).\n\n## Estrazione dei codici CUP da OpenCUP\n\n\n\nI dati \"[focus PNRR](../fonti/opencup/focus-pnrr.qmd)\", hanno una colonna che contiene il codice Istat dei Comuni italiani associati ai vari progetti. Quello del Comune di Messina è `083048`.\n\nIl file di partenza è in formato Excel: per **estrarre** soltanto i dati di Messina, si cerca la colonna `CODI_CODICE_COMUNE`, si applica il filtro per il **valore `083048`** (vedi @fig-filtro-excel), si copiano e incollano i risultati in un nuovo foglio elettronico e si salva il file.\n\nCome formato di _output_, si sceglie `CSV (delimitato da virgola) (*.csv)`. È il file [`opencup-focus-083048.csv`](../data/messina/opencup-focus-083048.csv).<br>\nSono **circa 360 progetti**.\n\n![Applicare un filtro in un foglio elettronico](images/excel-filter.png){fig-alt=\"Applicare un filtro in un foglio elettronico\" #fig-filtro-excel}\n\nE a partire da questo file estratto, è utile per i prossimi step, **salvare** in CSV anche **un file contenente la sola colonna con i valori univoci di codici CUP**.<br>\nCon un foglio elettronico si può fare un semplice copia e incolla in un nuovo foglio della sola prima colonna e salvare il tutto in CSV.<br>\nIn output il file [`opencup-focus-083048-cup.csv`](../data/messina/opencup-focus-083048-cup.csv).\n\n::: {.callout-tip collapse=\"true\"}\n## Estrarre la sola colonna con i codici CUP, da riga di comando\nÈ comodo farlo con [**Miller**](https://miller.readthedocs.io/en/latest/):\n\n```{.bash}\nmlr --csv cut -f CODICE_CUP then uniq -a opencup-focus-083048.csv >opencup-focus-083048-cup.csv\n```\n\nCon `cut -f CODICE_CUP` si taglia la sola colonna `CODICE_CUP` e con `uniq -a` si estraggono i soli valori univoci.\n\n:::\n\n## Estrarre i dati da ANAC, a partire dai codici CUP estratti\n\n\n\nIl [dataset CUP](../fonti/anac/index.qmd#il-dataset-cup) pubblicato dall'Autorità Nazionale Anticorruzione è composto da **più di 3 milioni di record**, quindi con è \"lavorabile\" con un foglio elettronico (troppe righe).<br>\nÈ necessario utilizzare un linguaggio di programmazione o delle _utility_ dedicate alla elaborazione di file di testo strutturato (`CSV`, `TSV`, `JSON`, ecc.).\n\nIl file di riferimento ha soltanto le colonne `CIG` e `CUP`.\n\n| CIG | CUP |\n| --- | --- |\n| 5462644C6C | I81C11000040006 |\n| 009893079C | 000000000000000 |\n| ZBB02E5426 | H81J09002660007 |\n\nQuindi, a partire dai CUP associati al Comune di Messina [estratti sopra](#estrazione-dei-codici-cup-da-opencup), bisogna estrarre dai dati ANAC soltanto le righe con i codici CUP corrispondenti. I due dataset si devono incrociare tra loro (si definisce `JOIN`[^join]), usando al la coincidenza tra i `CUP` come filtro.\n\n[^join]: vedi [Wikipedia](https://www.wikiwand.com/it/Join%20(SQL)).\n\n![I dati verranno incrociati (un `JOIN`), sfruttando la coincidenza dei `CUP`](images/opencup-focus-join-anac-083048.png){fig-alt=\"Join tra dati OpenCUP e ANAC\" #fig-join-opencup-anac}\n\nPer farlo si può usare il comodo ed efficiente [`qsv`](https://github.com/jqnatividad/qsv), a partire dai  file [`opencup-focus-083048-cup.csv`](../data/messina/opencup-focus-083048-cup.csv) (che contiene i soli codici CUP del Comune di Messina) e [`cup_csv.csv`](https://dati.anticorruzione.it/opendata/download/dataset/cup/filesystem/cup_csv.zip) (che è il file di ANAC):\n\n```{.bash}\nqsv searchset -d \";\" -i -s CUP opencup-focus-083048-cup.csv cup_csv.csv >anac-cup-cig-083048.csv\n```\n\nAlcune note sul comando:\n\n- `-d \";\"` per impostare il separatore di campo che nel `cup_csv.csv` di ANAC è `;`\n- `-i`, per fare una ricerca che non tenga conto di \"maiuscole\" e \"miniscole\";\n- `-s CUP`, per definire la colonna su cui eseguire la ricerca dei `CUP`;\n- e infine il file che verrà usato come filtro `opencup-focus-083048-cup.csv` e quello da cui verranno estratti i file.\n\n::: {.cell execution_count=3}\n\n::: {.cell-output .cell-output-display}\n\n\nIn output il file [`anac-cup-cig-083048.csv`](../data/messina/anac-cup-cig-083048.csv) (separatore di campo la `,`):\n\n- numero di **record** pari **84** (esclusa la riga di intestazione);\n- numero di **codici CUP** univoci **42**;\n- numero di **codici CIG** univoci **60**.\n\n\n:::\n:::\n\n\nA partire dal file estratto è utile **estrarre** anche un **file `CSV`** con i **soli codici CIG univoci**.<br>\nPer questo esempio è stato creato il file [anac-cup-cig-083048-cig.csv](../data/messina/anac-cup-cig-083048-cig.csv).\n\n::: {.callout-tip collapse=\"true\"}\n## Estrarre la lista dei valori univoci dei CIG\n\nSi può usare [Miller](https://miller.readthedocs.io/en/6.7.0/).\n\n\n```{bash}\nmlr --c2n cut -f CIG then uniq -a anac-cup-cig-083048.csv >anac-cup-cig-083048-cig.csv\n```\n\n\n- `cut -f CIG`, per estrarre soltanto la colonna `CIG`;\n- `then uniq -a`, per rimuovere eventuali doppioni.\n\n:::\n\nQuesto file è comodo per [**interrogare le API di ANAC**](../fonti/anac/informazioni-cig.qmd#tramite-api), ed **estrarre** le **informazioni relative** a questi codici CIG estratti per Messina.<br>\nQuesta è un'operazione semplice, ma richiede alcune conoscenze di programmazione. Qui sotto, al click, un esempio di codice.\n\n::: {.callout-note collapse=\"true\"}\n## Interrogare le API di ANAC ed estrarre i dati di insieme\n\nÈ uno script `bash` basato su [Miller](https://miller.readthedocs.io/en/latest/) e su [flatterer](https://flatterer.opendata.coop/).\n\n```{.bash}\n# variabile con il percorso assoluto della cartella dello script\nfolder=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\n\n# crea le cartelle di output\nmkdir -p \"$folder\"/rawdata/cig\nmkdir -p \"$folder\"/cig\n\n# per ogni CIG estratto, interroga l'API di ANAC e salva il file jsonl\nwhile IFS=\"\" read -r line; do\n  if [ ! -f \"$folder\"/rawdata/cig/\"$line\".jsonl ]; then\n    curl -kL \"https://api.anticorruzione.it/apicig/1.0.0/getSmartCig/$line\" >\"$folder\"/rawdata/cig/\"$line\".jsonl\n  fi\ndone <\"$folder\"/anac-cup-cig-083048-cig.csv\n\n# unisci tutti i file jsonl in un unico file json\nif [ ! -f \"$folder\"/anac-cig.json ]; then\n  mlr --ijsonl --ojson --no-jvstack  cat \"$folder\"/rawdata/cig/*.jsonl >\"$folder\"/anac-cig.json\nfi\n\n# estrai dal file JSON, le tabelle in esseo contenute in formato CSV\nflatterer --force \"$folder\"/anac-cig.json \"$folder\"/cig\n```\n:::\n\nIn output diversi file `CSV` con le informazioni relative ai codici CIG estratti per Messina:\n\n- [`anac-cig.csv`](../data/messina/cig/csv/anac-cig.csv), è il file principale più ricco, con le informazioni principali;\n- [`bando_CUP.csv`](../data/messina/cig/csv/bando_CUP.csv), contiene i `CUP` correlati ai vari `CIG`;\n- [`incaricati.csv`](../data/messina/cig/csv/incaricati.csv), contiene i nomi delle persone incaricate;\n- [`bando_CPV.csv`](../data/messina/cig/csv/bando_CPV.csv), contiene i codici CPV - ovvero la categorizzazione del tipo di \"oggetto\" in gara - correlati ai vari `CIG`.\n\n## Estrarre i dati della Banca dati Servizio Contratti Pubblici\n\nPer estrarre i dati relativi a Messina e al PNRR dalla [Banca Dati SCP](../fonti/scp/index.qmd), si possono usare i **codici `CIG`** presenti nel file [anac-cup-cig-083048-cig.csv](../data/messina/anac-cup-cig-083048-cig.csv) estratto [sopra](#estrarre-i-dati-da-anac-a-partire-dai-codici-cup-estratti).\n\n![I dati verranno incrociati (un `JOIN`), sfruttando la coincidenza dei `CIG`](images/scp-join-anac-083048.png){fig-alt=\"Join tra dati SCP e ANAC\" #fig-join-scp-anac}\n\n\nQui sotto ad esempio i comandi necessari per estrarre i dati dai file **atti**, **esiti** e **bandi**, contenuti nella Banca Dati SCP.\n\n\n\n::: {.callout}\n## Estrarre dai dati SCP, i dati a partire dai CIG di Messina\n\nSi può usare ancora una volta il comodo ed efficiente [`qsv`](https://github.com/jqnatividad/qsv), a partire dal file [`anac-cup-cig-083048-cig.csv`](../data/messina/anac-cup-cig-083048-cig.csv) con i soli codici CIG legati al PNRR e relativi al Comune di Messina:\n\n```{.bash}\n# atti\nqsv searchset -i -s cig anac-cup-cig-083048-cig.csv v_od_atti.csv >scp-atti-083048.csv\n# esiti\nqsv searchset -i -s cig anac-cup-cig-083048-cig.csv v_od_esiti.csv >scp-esiti-083048.csv\n# bandi\nqsv searchset -i -s cig anac-cup-cig-083048-cig.csv v_od_bandi.csv >scp-bandi-083048.csv\n```\n\nCon `-i -s cig anac-cup-cig-083048-cig.csv` si cercano nei file SCP nella colonna `cig` tutti i record contenenti i codici `CIG` estratti per Messina.\n:::\n\n\nIn output:\n\n- [`scp-atti-083048.csv`](../data/messina/scp-atti-083048.csv), contiene i dati relativi agli atti;\n- [`scp-bandi-083048.csv`](../data/messina/scp-bandi-083048.csv), contiene i dati relativi ai bandi;\n- [`scp-esiti-083048.csv`](../data/messina/scp-esiti-083048.csv), contiene i dati relativi agli esiti (ma, al 17 febbraio 2023, **non ci sono dati sugli esiti per Messina**).\n\n## Estrarre i dati da OpenBDAP\n\nOpenBDAP è un'altra fonte informativa nazionale sui contratti pubblici. Come indicato nella [sezione dedicata](../fonti/openbdap/index.qmd#i-dati-correlati-al-pnrr), è possibile fare delle ricerche per codice `CUP`, inserendo un elenco di CUP (**non più di 300 per volta**).\n\nQuindi ancora una volta si possono usare i [codici CUP estratti per il Comune di Messina](#estrazione-dei-codici-cup-da-opencup), ovvero quelli del file  [`opencup-focus-083048-cup.csv`](../data/messina/opencup-focus-083048-cup.csv) e usarli come filtro per la ricerca su OpenBDAP. Sono circa 360, quindi si dovranno eseguire 2 ricerche.\n\nIn _output_ questo file `XLSX`, suddiviso in 3 fogli: `Dettaglio CUP`, `Dettaglio CIG` e `Dettaglio Indicatori`. Qui i dati estratti al 5 febbraio 2023: [`openbdap-083048.xlsx`](../data/messina/openbdap-083048.xlsx).\n\n## Insieme dei dati raccolti\n\nIn **questo [foglio elettronico](https://docs.google.com/spreadsheets/d/1qD4AwS_DLoEckTvir0ndK14BXCtfDyC_dZkAi6cNjlA/edit?usp=sharing)** tutti gli _output_ estratti (fanno riferimento a quanto disponibile a inizio febbraio del 2023).<br>\nAprendolo si può avere un'idea di quali tipi di informazioni è possibile estrarre da queste fonti.\n\n[![Foglio elettronico con i dati raccolti per Messina](images/dati-raccolti.png){fig-alt=\"Foglio elettronico con i dati raccolti relativi al Comune di Messina\" #fig-foglio-dati-messina}](https://docs.google.com/spreadsheets/d/1qD4AwS_DLoEckTvir0ndK14BXCtfDyC_dZkAi6cNjlA/edit?usp=sharing)\n\n::: {.callout-note}\n## Partecipa\n\nSe vuoi fare delle **proposte** su questo vademecum, se vuoi **raccontarci** come l'hai usato, se hai bisogno di **aiuto** in merito, ecco [come fare](/partecipa.qmd).\n:::\n\n",
    "supporting": [
      "procedura-esempio_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}